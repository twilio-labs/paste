{
  "AccountSwitcherStateReturn": {
    "animated": {
      "type": "number | boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "If `true`, `animating` will be set to `true` when `visible` is updated.\nIt'll wait for `stopAnimation` to be called or a CSS transition ends.\nIf `animated` is set to a `number`, `stopAnimation` will be called only\nafter the same number of milliseconds have passed."
    },
    "animating": {
      "type": "boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Whether it's animating or not."
    },
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "down": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item below."
    },
    "first": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the first item."
    },
    "groups": {
      "type": "Group[]",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Lists all the composite groups with their `id` and DOM `ref`. This state\nis automatically updated when `registerGroup` and `unregisterGroup` are\ncalled."
    },
    "hide": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Changes the `visible` state to `false`"
    },
    "items": {
      "type": "Item[]",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Lists all the composite items with their `id`, DOM `ref`, `disabled` state\nand `groupId` if any. This state is automatically updated when\n`registerItem` and `unregisterItem` are called."
    },
    "last": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the last item."
    },
    "loop": {
      "type": "boolean | Orientation",
      "defaultValue": false,
      "required": true,
      "externalProp": true,
      "description": "On one-dimensional composites:\n  - `true` loops from the last item to the first item and vice-versa.\n  - `horizontal` loops only if `orientation` is `horizontal` or not set.\n  - `vertical` loops only if `orientation` is `vertical` or not set.\n  - If `currentId` is initially set to `null`, the composite element will\nbe focused in between the last and first items.\n\nOn two-dimensional composites:\n  - `true` loops from the last row/column item to the first item in the\nsame row/column and vice-versa. If it's the last item in the last row, it\nmoves to the first item in the first row and vice-versa.\n  - `horizontal` loops only from the last row item to the first item in\nthe same row.\n  - `vertical` loops only from the last column item to the first item in\nthe column row.\n  - If `currentId` is initially set to `null`, vertical loop will have no\neffect as moving down from the last row or up from the first row will\nfocus the composite element.\n  - If `wrap` matches the value of `loop`, it'll wrap between the last\nitem in the last row or column and the first item in the first row or\ncolumn and vice-versa."
    },
    "modal": {
      "type": "boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Toggles Dialog's `modal` state.\n  - Non-modal: `preventBodyScroll` doesn't work and focus is free.\n  - Modal: `preventBodyScroll` is automatically enabled, focus is\ntrapped within the dialog and the dialog is rendered within a `Portal`\nby default."
    },
    "move": {
      "type": "(id: string | null) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to a given item ID."
    },
    "next": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the next item."
    },
    "place": {
      "type": "Dispatch<SetStateAction<Placement>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Change the `placement` state."
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "previous": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the previous item."
    },
    "registerGroup": {
      "type": "(group: Group) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Registers a composite group."
    },
    "registerItem": {
      "type": "(item: Item) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Registers a composite item."
    },
    "reset": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Resets to initial state."
    },
    "rtl": {
      "type": "boolean",
      "defaultValue": false,
      "required": true,
      "externalProp": true,
      "description": "Determines how `next` and `previous` functions will behave. If `rtl` is\nset to `true`, they will be inverted. This only affects the composite\nwidget behavior. You still need to set `dir=\"rtl\"` on HTML/CSS."
    },
    "setAnimated": {
      "type": "Dispatch<SetStateAction<number | boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `animated`."
    },
    "setBaseId": {
      "type": "Dispatch<SetStateAction<string>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `baseId`."
    },
    "setCurrentId": {
      "type": "Dispatch<SetStateAction<string | null | undefined>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `currentId`. This is different from `composite.move` as this only\nupdates the `currentId` state without moving focus. When the composite\nwidget gets focused by the user, the item referred by the `currentId`\nstate will get focus."
    },
    "setLoop": {
      "type": "Dispatch<SetStateAction<boolean | Orientation>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `loop`."
    },
    "setModal": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `modal`."
    },
    "setOrientation": {
      "type": "Dispatch<SetStateAction<Orientation | undefined>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `orientation`."
    },
    "setRTL": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `rtl`."
    },
    "setShift": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `shift`."
    },
    "setVisible": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `visible`."
    },
    "setWrap": {
      "type": "Dispatch<SetStateAction<boolean | Orientation>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `wrap`."
    },
    "shift": {
      "type": "boolean",
      "defaultValue": false,
      "required": true,
      "externalProp": true,
      "description": "**Has effect only on two-dimensional composites**. If enabled, moving up\nor down when there's no next item or the next item is disabled will shift\nto the item right before it."
    },
    "show": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Changes the `visible` state to `true`"
    },
    "sort": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sorts the `composite.items` based on the items position in the DOM. This\nis especially useful after modifying the composite items order in the DOM.\nMost of the time, though, you don't need to manually call this function as\nthe re-ordering happens automatically."
    },
    "stopAnimation": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Stops animation. It's called automatically if there's a CSS transition."
    },
    "toggle": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Toggles the `visible` state"
    },
    "unregisterGroup": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Unregisters a composite group."
    },
    "unregisterItem": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Unregisters a composite item."
    },
    "unstable_arrowRef": {
      "type": "RefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "The arrow element."
    },
    "unstable_arrowStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Arrow styles."
    },
    "unstable_disclosureRef": {
      "type": "MutableRefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": true,
      "externalProp": true
    },
    "unstable_hasActiveWidget": {
      "type": "boolean",
      "defaultValue": false,
      "required": true,
      "externalProp": true
    },
    "unstable_idCountRef": {
      "type": "MutableRefObject<number>",
      "defaultValue": null,
      "required": true,
      "externalProp": true
    },
    "unstable_includesBaseElement": {
      "type": "boolean",
      "defaultValue": false,
      "required": true,
      "externalProp": true
    },
    "unstable_moves": {
      "type": "number",
      "defaultValue": "0",
      "required": true,
      "externalProp": true,
      "description": "Stores the number of moves that have been performed by calling `move`,\n`next`, `previous`, `up`, `down`, `first` or `last`."
    },
    "unstable_originalPlacement": {
      "type": "Placement",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "`placement` passed to the hook."
    },
    "unstable_popoverRef": {
      "type": "RefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "The popover element."
    },
    "unstable_popoverStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Popover styles."
    },
    "unstable_referenceRef": {
      "type": "RefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "The reference element."
    },
    "unstable_setHasActiveWidget": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `hasActiveWidget`."
    },
    "unstable_setIncludesBaseElement": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `includesBaseElement`."
    },
    "unstable_setValue": {
      "type": "(name: string, value?: any) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Updates checkboxes and radios values within the menu."
    },
    "unstable_setVirtual": {
      "type": "Dispatch<SetStateAction<boolean>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `virtual`."
    },
    "unstable_update": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": true
    },
    "unstable_values": {
      "type": "Record<string, any>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Stores the values of radios and checkboxes within the menu."
    },
    "unstable_virtual": {
      "type": "boolean",
      "defaultValue": false,
      "required": true,
      "externalProp": true,
      "description": "If enabled, the composite element will act as an\n[aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant)\ncontainer instead of\n[roving tabindex](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\nDOM focus will remain on the composite while its items receive virtual focus."
    },
    "up": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item above."
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "wrap": {
      "type": "boolean | Orientation",
      "defaultValue": false,
      "required": true,
      "externalProp": true,
      "description": "**Has effect only on two-dimensional composites**. If enabled, moving to\nthe next item from the last one in a row or column will focus the first\nitem in the next row or column and vice-versa.\n  - `true` wraps between rows and columns.\n  - `horizontal` wraps only between rows.\n  - `vertical` wraps only between columns.\n  - If `loop` matches the value of `wrap`, it'll wrap between the last\nitem in the last row or column and the first item in the first row or\ncolumn and vice-versa."
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "orientation": {
      "type": "Orientation",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "Defines the orientation of the composite widget. If the composite has a\nsingle row or column (one-dimensional), the `orientation` value determines\nwhich arrow keys can be used to move focus:\n  - `undefined`: all arrow keys work.\n  - `horizontal`: only left and right arrow keys work.\n  - `vertical`: only up and down arrow keys work.\n\nIt doesn't have any effect on two-dimensional composites."
    }
  },
  "AccountSwitcherInitialState": {
    "animated": {
      "type": "number | boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "If `true`, `animating` will be set to `true` when `visible` is updated.\nIt'll wait for `stopAnimation` to be called or a CSS transition ends.\nIf `animated` is set to a `number`, `stopAnimation` will be called only\nafter the same number of milliseconds have passed."
    },
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "gutter": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Offset between the reference and the popover on the main axis. Should not be combined with `unstable_offset`."
    },
    "loop": {
      "type": "boolean | Orientation",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "On one-dimensional composites:\n  - `true` loops from the last item to the first item and vice-versa.\n  - `horizontal` loops only if `orientation` is `horizontal` or not set.\n  - `vertical` loops only if `orientation` is `vertical` or not set.\n  - If `currentId` is initially set to `null`, the composite element will\nbe focused in between the last and first items.\n\nOn two-dimensional composites:\n  - `true` loops from the last row/column item to the first item in the\nsame row/column and vice-versa. If it's the last item in the last row, it\nmoves to the first item in the first row and vice-versa.\n  - `horizontal` loops only from the last row item to the first item in\nthe same row.\n  - `vertical` loops only from the last column item to the first item in\nthe column row.\n  - If `currentId` is initially set to `null`, vertical loop will have no\neffect as moving down from the last row or up from the first row will\nfocus the composite element.\n  - If `wrap` matches the value of `loop`, it'll wrap between the last\nitem in the last row or column and the first item in the first row or\ncolumn and vice-versa."
    },
    "modal": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Toggles Dialog's `modal` state.\n  - Non-modal: `preventBodyScroll` doesn't work and focus is free.\n  - Modal: `preventBodyScroll` is automatically enabled, focus is\ntrapped within the dialog and the dialog is rendered within a `Portal`\nby default."
    },
    "orientation": {
      "type": "Orientation",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "Defines the orientation of the composite widget. If the composite has a\nsingle row or column (one-dimensional), the `orientation` value determines\nwhich arrow keys can be used to move focus:\n  - `undefined`: all arrow keys work.\n  - `horizontal`: only left and right arrow keys work.\n  - `vertical`: only up and down arrow keys work.\n\nIt doesn't have any effect on two-dimensional composites."
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "rtl": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "Determines how `next` and `previous` functions will behave. If `rtl` is\nset to `true`, they will be inverted. This only affects the composite\nwidget behavior. You still need to set `dir=\"rtl\"` on HTML/CSS."
    },
    "shift": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "**Has effect only on two-dimensional composites**. If enabled, moving up\nor down when there's no next item or the next item is disabled will shift\nto the item right before it."
    },
    "unstable_fixed": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not the popover should have `position` set to `fixed`."
    },
    "unstable_flip": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Flip the popover's placement when it starts to overlap its reference\nelement."
    },
    "unstable_includesBaseElement": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true
    },
    "unstable_offset": {
      "type": "[string | number, string | number]",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Offset between the reference and the popover: [main axis, alt axis]. Should not be combined with `gutter`."
    },
    "unstable_preventOverflow": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Prevents popover from being positioned outside the boundary."
    },
    "unstable_values": {
      "type": "Record<string, any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Stores the values of radios and checkboxes within the menu."
    },
    "unstable_virtual": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "If enabled, the composite element will act as an\n[aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant)\ncontainer instead of\n[roving tabindex](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\nDOM focus will remain on the composite while its items receive virtual focus."
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "wrap": {
      "type": "boolean | Orientation",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "**Has effect only on two-dimensional composites**. If enabled, moving to\nthe next item from the last one in a row or column will focus the first\nitem in the next row or column and vice-versa.\n  - `true` wraps between rows and columns.\n  - `horizontal` wraps only between rows.\n  - `vertical` wraps only between columns.\n  - If `loop` matches the value of `wrap`, it'll wrap between the last\nitem in the last row or column and the first item in the first row or\ncolumn and vice-versa."
    }
  },
  "AccountSwitcherBadge": {
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "first": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the first item."
    },
    "i18nButtonLabel": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Accessible label for the button that opens the menu"
    },
    "last": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the last item."
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "show": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Changes the `visible` state to `true`"
    },
    "toggle": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Toggles the `visible` state"
    },
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "as": {
      "type": "keyof IntrinsicElements",
      "defaultValue": "'button'",
      "required": false,
      "externalProp": false,
      "description": "The HTML tag to replace the default `<button>` tag."
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "color": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute.\n\n\nPrevent actions from firing on this Button"
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER_BADGE'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When an element is `disabled`, it may still be `focusable`. It works\nsimilarly to `readOnly` on form elements. In this case, only\n`aria-disabled` will be set."
    },
    "form": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formAction": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formEncType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formMethod": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formNoValidate": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formTarget": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "fullWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": false,
      "description": "Sets the Button width to 100% of the parent container."
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hide": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Changes the `visible` state to `false`"
    },
    "href": {
      "type": "string",
      "defaultValue": "null",
      "required": false,
      "externalProp": false,
      "description": "A URL to route to. Must use as=\"a\" for this prop to work."
    },
    "i18nExternalLinkLabel": {
      "type": "string",
      "defaultValue": "'(link takes you to an external page)'",
      "required": false,
      "externalProp": false,
      "description": "Title for showExternal icon"
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "loading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": false,
      "description": "Prevent actions and show a loading spinner"
    },
    "move": {
      "type": "(id: string | null) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Moves focus to a given item ID."
    },
    "name": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<any> &\n  AnimationEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<any> &\n  FocusEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<any> &\n  FocusEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<any> &\n  CompositionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<any> &\n  DragEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<any> &\n  FocusEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<any> &\n  FocusEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<any> &\n  KeyboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<any> &\n  MouseEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<any> &\n  ClipboardEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<any> &\n  PointerEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<any> & UIEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<any> & UIEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<any> &\n  FormEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<any> &\n  TouchEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<any> &\n  TransitionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<any> &\n  TransitionEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<any> &\n  ReactEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<any> &\n  WheelEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<any> &\n  WheelEventHandler<HTMLButtonElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "pressed": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": false,
      "description": "Sets the aria-pressed attribute. Must be used with 'secondary' or 'secondary_icon' variants."
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ref": {
      "type": "((instance: any) => void) | RefObject<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "size": {
      "type": "ButtonSizes",
      "defaultValue": "'default'",
      "required": false,
      "externalProp": false
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "0 | -1",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "target": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "type": {
      "type": "\"button\" | \"reset\" | \"submit\"",
      "defaultValue": "'button'",
      "required": false,
      "externalProp": true,
      "description": "Use at least one `submit` button per `<form>`. Outside of forms use `button` (default)."
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_arrowStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Arrow styles."
    },
    "unstable_clickOnEnter": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Enter</kbd>."
    },
    "unstable_clickOnSpace": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Space</kbd>."
    },
    "unstable_disclosureRef": {
      "type": "MutableRefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_moves": {
      "type": "number",
      "defaultValue": "0",
      "required": false,
      "externalProp": true,
      "description": "Stores the number of moves that have been performed by calling `move`,\n`next`, `previous`, `up`, `down`, `first` or `last`."
    },
    "unstable_popoverStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Popover styles."
    },
    "unstable_referenceRef": {
      "type": "RefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "The reference element."
    },
    "unstable_system": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Options passed to `reakit-system-*`"
    },
    "value": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrapElement": {
      "type": "(element: ReactNode) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Function returned by the hook to wrap the element to which html props\nwill be passed."
    }
  },
  "AccountSwitcher": {
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "first": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the first item."
    },
    "items": {
      "type": "Item[]",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Lists all the composite items with their `id`, DOM `ref`, `disabled` state\nand `groupId` if any. This state is automatically updated when\n`registerItem` and `unregisterItem` are called."
    },
    "last": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the last item."
    },
    "move": {
      "type": "(id: string | null) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to a given item ID."
    },
    "next": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the next item."
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "previous": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the previous item."
    },
    "setCurrentId": {
      "type": "Dispatch<SetStateAction<string | null | undefined>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `currentId`. This is different from `composite.move` as this only\nupdates the `currentId` state without moving focus. When the composite\nwidget gets focused by the user, the item referred by the `currentId`\nstate will get focus."
    },
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "animated": {
      "type": "number | boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "If `true`, `animating` will be set to `true` when `visible` is updated.\nIt'll wait for `stopAnimation` to be called or a CSS transition ends.\nIf `animated` is set to a `number`, `stopAnimation` will be called only\nafter the same number of milliseconds have passed."
    },
    "animating": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's animating or not."
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "color": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute."
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When an element is `disabled`, it may still be `focusable`. It works\nsimilarly to `readOnly` on form elements. In this case, only\n`aria-disabled` will be set."
    },
    "groups": {
      "type": "Group[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Lists all the composite groups with their `id` and DOM `ref`. This state\nis automatically updated when `registerGroup` and `unregisterGroup` are\ncalled."
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hide": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Changes the `visible` state to `false`"
    },
    "hideOnClickOutside": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When enabled, user can hide the dialog by clicking outside it."
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "modal": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Toggles Dialog's `modal` state.\n  - Non-modal: `preventBodyScroll` doesn't work and focus is free.\n  - Modal: `preventBodyScroll` is automatically enabled, focus is\ntrapped within the dialog and the dialog is rendered within a `Portal`\nby default."
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "orientation": {
      "type": "Orientation",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "Defines the orientation of the composite widget. If the composite has a\nsingle row or column (one-dimensional), the `orientation` value determines\nwhich arrow keys can be used to move focus:\n  - `undefined`: all arrow keys work.\n  - `horizontal`: only left and right arrow keys work.\n  - `vertical`: only up and down arrow keys work.\n\nIt doesn't have any effect on two-dimensional composites."
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "preventBodyScroll": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When enabled, user can't scroll on body when the dialog is visible.\nThis option doesn't work if the dialog isn't modal."
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ref": {
      "type": "((instance: any) => void) | RefObject<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "stopAnimation": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Stops animation. It's called automatically if there's a CSS transition."
    },
    "style": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_autoFocusOnHide": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not to move focus when the dialog hides."
    },
    "unstable_autoFocusOnShow": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not to move focus when the dialog shows."
    },
    "unstable_disclosureRef": {
      "type": "MutableRefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_finalFocusRef": {
      "type": "RefObject<HTMLElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "The element that will be focused when the dialog hides.\nWhen not set, the disclosure component will be used."
    },
    "unstable_initialFocusRef": {
      "type": "RefObject<HTMLElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "The element that will be focused when the dialog shows.\nWhen not set, the first tabbable element within the dialog will be used."
    },
    "unstable_moves": {
      "type": "number",
      "defaultValue": "0",
      "required": false,
      "externalProp": true,
      "description": "Stores the number of moves that have been performed by calling `move`,\n`next`, `previous`, `up`, `down`, `first` or `last`."
    },
    "unstable_orphan": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not the dialog should be a child of its parent.\nOpening a nested orphan dialog will close its parent dialog if\n`hideOnClickOutside` is set to `true` on the parent.\nIt will be set to `false` if `modal` is `false`."
    },
    "unstable_popoverRef": {
      "type": "RefObject<HTMLElement | null>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "The popover element."
    },
    "unstable_popoverStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Popover styles."
    },
    "unstable_system": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Options passed to `reakit-system-*`"
    },
    "unstable_virtual": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "If enabled, the composite element will act as an\n[aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant)\ncontainer instead of\n[roving tabindex](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\nDOM focus will remain on the composite while its items receive virtual focus."
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrap": {
      "type": "boolean | Orientation",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "**Has effect only on two-dimensional composites**. If enabled, moving to\nthe next item from the last one in a row or column will focus the first\nitem in the next row or column and vice-versa.\n  - `true` wraps between rows and columns.\n  - `horizontal` wraps only between rows.\n  - `vertical` wraps only between columns.\n  - If `loop` matches the value of `wrap`, it'll wrap between the last\nitem in the last row or column and the first item in the first row or\ncolumn and vice-versa."
    },
    "wrapElement": {
      "type": "(element: ReactNode) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Function returned by the hook to wrap the element to which html props\nwill be passed."
    }
  },
  "AccountSwitcherItem": {
    "down": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item below."
    },
    "first": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the first item."
    },
    "items": {
      "type": "Item[]",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Lists all the composite items with their `id`, DOM `ref`, `disabled` state\nand `groupId` if any. This state is automatically updated when\n`registerItem` and `unregisterItem` are called."
    },
    "last": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the last item."
    },
    "move": {
      "type": "(id: string | null) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to a given item ID."
    },
    "next": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the next item."
    },
    "previous": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the previous item."
    },
    "registerItem": {
      "type": "(item: Item) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Registers a composite item."
    },
    "setCurrentId": {
      "type": "Dispatch<SetStateAction<string | null | undefined>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `currentId`. This is different from `composite.move` as this only\nupdates the `currentId` state without moving focus. When the composite\nwidget gets focused by the user, the item referred by the `currentId`\nstate will get focus."
    },
    "unregisterItem": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Unregisters a composite item."
    },
    "up": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item above."
    },
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "as": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "color": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute."
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER_ITEM'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When an element is `disabled`, it may still be `focusable`. It works\nsimilarly to `readOnly` on form elements. In this case, only\n`aria-disabled` will be set."
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hide": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Changes the `visible` state to `false`"
    },
    "href": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Pass href prop to render an anchor element."
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute."
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "orientation": {
      "type": "Orientation",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "Defines the orientation of the composite widget. If the composite has a\nsingle row or column (one-dimensional), the `orientation` value determines\nwhich arrow keys can be used to move focus:\n  - `undefined`: all arrow keys work.\n  - `horizontal`: only left and right arrow keys work.\n  - `vertical`: only up and down arrow keys work.\n\nIt doesn't have any effect on two-dimensional composites."
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ref": {
      "type": "((instance: any) => void) | RefObject<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_arrowStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Arrow styles."
    },
    "unstable_clickOnEnter": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Enter</kbd>."
    },
    "unstable_clickOnSpace": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Space</kbd>."
    },
    "unstable_hasActiveWidget": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true
    },
    "unstable_idCountRef": {
      "type": "MutableRefObject<number>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_moves": {
      "type": "number",
      "defaultValue": "0",
      "required": false,
      "externalProp": true,
      "description": "Stores the number of moves that have been performed by calling `move`,\n`next`, `previous`, `up`, `down`, `first` or `last`."
    },
    "unstable_popoverStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Popover styles."
    },
    "unstable_system": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Options passed to `reakit-system-*`"
    },
    "unstable_virtual": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "If enabled, the composite element will act as an\n[aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant)\ncontainer instead of\n[roving tabindex](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\nDOM focus will remain on the composite while its items receive virtual focus."
    },
    "variant": {
      "type": "MenuItemVariant",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrapElement": {
      "type": "(element: ReactNode) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Function returned by the hook to wrap the element to which html props\nwill be passed."
    }
  },
  "AccountSwitcherItemRadio": {
    "down": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item below."
    },
    "first": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the first item."
    },
    "items": {
      "type": "Item[]",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Lists all the composite items with their `id`, DOM `ref`, `disabled` state\nand `groupId` if any. This state is automatically updated when\n`registerItem` and `unregisterItem` are called."
    },
    "last": {
      "type": "() => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the last item."
    },
    "move": {
      "type": "(id: string | null) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to a given item ID."
    },
    "name": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "MenuItemRadio's name as in `menu.values`."
    },
    "next": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the next item."
    },
    "previous": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the previous item."
    },
    "registerItem": {
      "type": "(item: Item) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Registers a composite item."
    },
    "setCurrentId": {
      "type": "Dispatch<SetStateAction<string | null | undefined>>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Sets `currentId`. This is different from `composite.move` as this only\nupdates the `currentId` state without moving focus. When the composite\nwidget gets focused by the user, the item referred by the `currentId`\nstate will get focus."
    },
    "unregisterItem": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Unregisters a composite item."
    },
    "unstable_setValue": {
      "type": "(name: string, value?: any) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Updates checkboxes and radios values within the menu."
    },
    "unstable_values": {
      "type": "Record<string, any>",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Stores the values of radios and checkboxes within the menu."
    },
    "up": {
      "type": "(unstable_allTheWay?: boolean | undefined) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Moves focus to the item above."
    },
    "value": {
      "type": "| string\n  | number\n  | (string & readonly string[])\n  | (number & readonly string[])",
      "defaultValue": null,
      "required": true,
      "externalProp": true,
      "description": "Same as the `value` attribute."
    },
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accept": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "alt": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "as": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoComplete": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "baseId": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "ID that will serve as a base for all the items IDs."
    },
    "capture": {
      "type": "boolean | \"user\" | \"environment\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "checked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the `checked` attribute."
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "color": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "crossOrigin": {
      "type": "\"\" | \"anonymous\" | \"use-credentials\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "currentId": {
      "type": "string",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "The current focused item `id`.\n  - `undefined` will automatically focus the first enabled composite item.\n  - `null` will focus the base composite element and users will be able to\nnavigate out of it using arrow keys.\n  - If `currentId` is initially set to `null`, the base composite element\nitself will have focus and users will be able to navigate to it using\narrow keys."
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute."
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER_ITEM_RADIO'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "enterKeyHint": {
      "type": "| \"next\"\n  | \"previous\"\n  | \"search\"\n  | \"enter\"\n  | \"done\"\n  | \"go\"\n  | \"send\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "When an element is `disabled`, it may still be `focusable`. It works\nsimilarly to `readOnly` on form elements. In this case, only\n`aria-disabled` will be set."
    },
    "form": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formAction": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formEncType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formMethod": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formNoValidate": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "formTarget": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "height": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hide": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Changes the `visible` state to `false`"
    },
    "href": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Pass href prop to render an anchor element."
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Same as the HTML attribute."
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "list": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "max": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "maxLength": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "min": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "minLength": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "multiple": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<any> & ChangeEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "orientation": {
      "type": "Orientation",
      "defaultValue": "undefined",
      "required": false,
      "externalProp": true,
      "description": "Defines the orientation of the composite widget. If the composite has a\nsingle row or column (one-dimensional), the `orientation` value determines\nwhich arrow keys can be used to move focus:\n  - `undefined`: all arrow keys work.\n  - `horizontal`: only left and right arrow keys work.\n  - `vertical`: only up and down arrow keys work.\n\nIt doesn't have any effect on two-dimensional composites."
    },
    "pattern": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placement": {
      "type": "Placement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Actual `placement`."
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "readOnly": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ref": {
      "type": "((instance: any) => void) | RefObject<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "required": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setState": {
      "type": "Dispatch<SetStateAction<string | number | undefined>>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets `state`."
    },
    "size": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "src": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "state": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "The `value` attribute of the current checked radio."
    },
    "step": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "type": {
      "type": "HTMLInputTypeAttribute",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_arrowStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Arrow styles."
    },
    "unstable_checkOnFocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_clickOnEnter": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Enter</kbd>."
    },
    "unstable_clickOnSpace": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether or not trigger click on pressing <kbd>Space</kbd>."
    },
    "unstable_hasActiveWidget": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true
    },
    "unstable_idCountRef": {
      "type": "MutableRefObject<number>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_moves": {
      "type": "number",
      "defaultValue": "0",
      "required": false,
      "externalProp": true,
      "description": "Stores the number of moves that have been performed by calling `move`,\n`next`, `previous`, `up`, `down`, `first` or `last`."
    },
    "unstable_popoverStyles": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Popover styles."
    },
    "unstable_system": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Options passed to `reakit-system-*`"
    },
    "unstable_virtual": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": true,
      "description": "If enabled, the composite element will act as an\n[aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant)\ncontainer instead of\n[roving tabindex](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).\nDOM focus will remain on the composite while its items receive virtual focus."
    },
    "variant": {
      "type": "MenuItemVariant",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "visible": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Whether it's visible or not."
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "width": {
      "type": "string | number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrapElement": {
      "type": "(element: ReactNode) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Function returned by the hook to wrap the element to which html props\nwill be passed."
    }
  },
  "AccountSwitcherGroup": {
    "label": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Accessible name of the MenuGroup."
    },
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER_GROUP'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "icon": {
      "type": "| string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | ReactFragment\n  | ReactPortal",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Pass a decorative Paste icon to display with the group label."
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    }
  },
  "AccountSwitcherSeparator": {
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"move\" | \"link\" | \"none\" | \"copy\" | \"execute\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "color": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "'ACCOUNT_SWITCHER_SEPARATOR'",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Separator's orientation."
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ref": {
      "type": "((instance: any) => void) | RefObject<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSProperties",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unstable_system": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Options passed to `reakit-system-*`"
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrapElement": {
      "type": "(element: ReactNode) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Function returned by the hook to wrap the element to which html props\nwill be passed."
    }
  }
}
