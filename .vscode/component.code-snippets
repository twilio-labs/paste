{
  // Place your paste workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Paste React component file outline": {
    "prefix": "prindex",
    "body": ["import * as React from 'react';", "import {Box} from '@twilio-paste/box';", "", "${1:prfcp}", ""],
    "description": "Create an component file starter"
  },
  "Paste React component with props file outline": {
    "prefix": "prindexp",
    "body": [
      "import * as React from 'react';",
      "import * as PropTypes from 'prop-types';",
      "import {Box} from '@twilio-paste/box';",
      "",
      "${1:prfcp}",
      ""
    ],
    "description": "Create an component with props file starter"
  },
  "Paste React Function Component With Props": {
    "prefix": "prfcp",
    "body": [
      "export interface ${1:ComponentName}Props {",
      "  children: NonNullable<React.ReactNode>;",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({children}) => {",
      "  return (",
      "    ${2:<Box>{children\\}</Box>}",
      "  );",
      "}",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}';",
      "",
      "${1:ComponentName}.propTypes = {",
      "  children: PropTypes.node.isRequired,",
      "};",
      "",
      "export {${1:ComponentName}};"
    ],
    "description": "Create a React component"
  },
  "Paste React Function Component Forward Ref With Props": {
    "prefix": "prfcfrp",
    "body": [
      "export interface ${1:ComponentName}Props {",
      "  children: NonNullable<React.ReactNode>;",
      "}",
      "",
      "const ${1:ComponentName} = React.forwardRef<HTMLDivElement, ${1:ComponentName}Props>(({children, ...props}, ref) => {",
      "  return (",
      "    ${2:<Box ref={ref\\}>{children\\}</Box>}",
      "  );",
      "}",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}';",
      "",
      "${1:ComponentName}.propTypes = {",
      "  children: PropTypes.node.isRequired,",
      "};",
      "",
      "export {${1:ComponentName}};"
    ],
    "description": "Create a React component"
  },
  "Paste React Function Component": {
    "prefix": "prfc",
    "body": [
      "export const ${1:ComponentName}: React.FC = ({children}) => {",
      "  return (",
      "    ${2:<Box>{children\\}</Box>}",
      "  );",
      "}"
    ],
    "description": "Create a React component"
  },
  "Paste React Function Component Forward Ref": {
    "prefix": "prfcfr",
    "body": [
      "export const ${1:ComponentName} = React.forwardRef<HTMLDivElement>(({children}, ref) => {",
      "  return (",
      "    ${2:<Box ref={ref\\}>{children\\}</Box>}",
      "  );",
      "}"
    ],
    "description": "Create a React component"
  },
  "Paste Styled Component With Props": {
    "prefix": "prscp",
    "body": [
      "export interface Styled${1:ComponentName}Props {",
      "  children: NonNullable<React.ReactNode>;",
      "}",
      "",
      "const Styled${1:ComponentName}= styled.div<Styled${1:ComponentName}Props>`",
      "  ${2:}",
      "`",
      "",
      "Styled${1:ComponentName}.displayName = 'Styled${1:ComponentName}';",
      "",
      "Styled${1:ComponentName}.propTypes = {",
      "  children: PropTypes.node.isRequired,",
      "};",
      "",
      "export {Styled${1:ComponentName}};"
    ],
    "description": "Create a Styled component"
  },
  "Paste Styled Component": {
    "prefix": "prsc",
    "body": ["export const Styled${1:ComponentName}= styled.div<{}>`", "  ${2:}", "`"],
    "description": "Create a Styled component"
  }
}
