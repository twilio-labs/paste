{
  "Toast": {
    "element": {
      "type": "any",
      "defaultValue": "TOAST",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider."
    },
    "i18nDismissLabel": {
      "type": "string",
      "defaultValue": "Dismiss toast",
      "required": false,
      "externalProp": false,
      "description": "Label for the dismiss button in a dismissable toast"
    },
    "i18nErrorLabel": {
      "type": "string",
      "defaultValue": "(error)",
      "required": false,
      "externalProp": false,
      "description": "Icon label text for the error variant"
    },
    "i18nNeutralLabel": {
      "type": "string",
      "defaultValue": "(information)",
      "required": false,
      "externalProp": false,
      "description": "Icon label text for the neutral variant"
    },
    "i18nSuccessLabel": {
      "type": "string",
      "defaultValue": "(success)",
      "required": false,
      "externalProp": false,
      "description": "Icon label text for the success variant"
    },
    "i18nWarningLabel": {
      "type": "string",
      "defaultValue": "(warning)",
      "required": false,
      "externalProp": false,
      "description": "Icon label text for the warning variant"
    },
    "onDismiss": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "callback when user clicks the dismiss button"
    },
    "setFocus": {
      "type": "boolean",
      "defaultValue": "'true'",
      "required": false,
      "externalProp": false,
      "description": "Use this to set focus within the toast when it is rendered"
    },
    "variant": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "The style of toast you would like the user to see"
    }
  },
  "Toaster": {
    "pop": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Method used to pop a toast from the toast stack based on it's id"
    },
    "toasts": {
      "type": "ToasterToast[]",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Collection of toasts to show in the toaster"
    },
    "left": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Sets the left value of the ToastContainer to add breakpoints for small screens"
    }
  },
  "ToastContainer": {
    "left": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Sets the left value of the ToastContainer to add breakpoints for small screens"
    }
  },
  "UseToasterReturned": {
    "pop": {
      "type": "(id: string) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Method used to pop a toast from the toast stack based on it's id"
    },
    "push": {
      "type": "(toast: ToasterPush) => void",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Method used to push a toast to the toast stack"
    },
    "toasts": {
      "type": "ToasterToast[]",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Collection of toasts to show in the toaster"
    }
  }
}
