{
  "CodeBlock": {
    "code": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "The code snippet to be rendered"
    },
    "language": {
      "type": "SnippetLanguages",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "The language of the code snipped"
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKeyLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "addEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture."
    },
    "after": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "align": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets or retrieves how the object is aligned with adjacent text."
    },
    "animate": {
      "type": "(\n  keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\n  options?: number | KeyframeAnimationOptions | undefined\n) => Animation",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "append": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "appendChild": {
      "type": "<T extends Node>(node: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAtomic": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAutoComplete": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaBusy": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaChecked": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaCurrent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaDisabled": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaExpanded": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHasPopup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHidden": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaInvalid": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaKeyShortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLevel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLive": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaModal": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiLine": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiSelectable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaOrientation": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPlaceholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPosInSet": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPressed": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaReadOnly": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRequired": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRoleDescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSelected": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSetSize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSort": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMax": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMin": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueNow": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "assignedSlot": {
      "type": "HTMLSlotElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachInternals": {
      "type": "() => ElementInternals",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachShadow": {
      "type": "(init: ShadowRootInit) => ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Creates a shadow root for element and returns it."
    },
    "ATTRIBUTE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attributes": {
      "type": "NamedNodeMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autocapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autofocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "baseURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's node document's document base URL."
    },
    "before": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "blur": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "CDATA_SECTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a CDATASection node."
    },
    "childElementCount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "childNodes": {
      "type": "NodeListOf<ChildNode>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the children."
    },
    "classList": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object."
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's class content attribute. Can be set to change it."
    },
    "click": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "cloneNode": {
      "type": "(deep?: boolean | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants."
    },
    "closest": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selector: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selector: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise."
    },
    "COMMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Comment node."
    },
    "compareDocumentPosition": {
      "type": "(other: Node) => number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a bitmask indicating the position of other relative to node."
    },
    "contains": {
      "type": "(other: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if other is an inclusive descendant of node, and false otherwise."
    },
    "contentEditable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "copyTextFormatter": {
      "type": "(code: string) => string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "dataset": {
      "type": "DOMStringMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dispatchEvent": {
      "type": "(event: Event) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise."
    },
    "DOCUMENT_FRAGMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a DocumentFragment node."
    },
    "DOCUMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a document."
    },
    "DOCUMENT_POSITION_CONTAINED_BY": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is a descendant of node."
    },
    "DOCUMENT_POSITION_CONTAINS": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is an ancestor of node."
    },
    "DOCUMENT_POSITION_DISCONNECTED": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when node and other are not in the same tree."
    },
    "DOCUMENT_POSITION_FOLLOWING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is following node."
    },
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "DOCUMENT_POSITION_PRECEDING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is preceding node."
    },
    "DOCUMENT_TYPE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a doctype."
    },
    "draggable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "ELEMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is an element."
    },
    "enterKeyHint": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_REFERENCE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "externalLink": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "firstChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child."
    },
    "firstElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child that is an element, and null otherwise."
    },
    "focus": {
      "type": "(options?: FocusOptions | undefined) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAnimations": {
      "type": "(\n  options?: GetAnimationsOptions | undefined\n) => Animation[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttribute": {
      "type": "(qualifiedName: string) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise."
    },
    "getAttributeNames": {
      "type": "() => string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the qualified names of all element's attributes. Can contain duplicates."
    },
    "getAttributeNode": {
      "type": "(qualifiedName: string) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNodeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise."
    },
    "getBoundingClientRect": {
      "type": "() => DOMRect",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getClientRects": {
      "type": "() => DOMRectList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByClassName": {
      "type": "(classNames: string) => HTMLCollectionOf<Element>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes."
    },
    "getElementsByTagName": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; (qualifiedName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByTagNameNS": {
      "type": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<...>; (namespace: string | null, localName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getRootNode": {
      "type": "(options?: GetRootNodeOptions | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's root."
    },
    "hasAttribute": {
      "type": "(qualifiedName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise."
    },
    "hasAttributeNS": {
      "type": "(namespace: string | null, localName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName."
    },
    "hasAttributes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has attributes, and false otherwise."
    },
    "hasChildNodes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node has children."
    },
    "hasPointerCapture": {
      "type": "(pointerId: number) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "i18nCopyLabelAfter": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "i18nCopyLabelBefore": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "i18nLinkLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's id content attribute. Can be set to change it."
    },
    "inert": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentElement": {
      "type": "(\n  where: InsertPosition,\n  element: Element\n) => Element | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentHTML": {
      "type": "(position: InsertPosition, text: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentText": {
      "type": "(where: InsertPosition, data: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertBefore": {
      "type": "<T extends Node>(node: T, child: Node | null) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isConnected": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if node is connected and false otherwise."
    },
    "isContentEditable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isDefaultNamespace": {
      "type": "(namespace: string | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isEqualNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node and otherNode have the same properties."
    },
    "isSameNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lastChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child."
    },
    "lastElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child that is an element, and null otherwise."
    },
    "localName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the local name."
    },
    "lookupNamespaceURI": {
      "type": "(prefix: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lookupPrefix": {
      "type": "(namespace: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "matches": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if matching selectors against element's root yields element, and false otherwise."
    },
    "maxLines": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "namespaceURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace."
    },
    "nextElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first following sibling that is an element, and null otherwise."
    },
    "nextSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the next sibling."
    },
    "nodeName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a string appropriate for the type of node."
    },
    "nodeType": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the type of node."
    },
    "nodeValue": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "normalize": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes."
    },
    "NOTATION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetParent": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onabort": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user aborts the download."
    },
    "onanimationcancel": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationend": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onauxclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onbeforeinput": {
      "type": "(this: GlobalEventHandlers, ev: InputEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onblur": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object loses the input focus."
    },
    "oncancel": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncanplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is possible, but would require further buffering."
    },
    "oncanplaythrough": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the contents of the object or selection have changed."
    },
    "onclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the left mouse button on the object"
    },
    "onclose": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncontextmenu": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu."
    },
    "oncopy": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncuechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncut": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondblclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user double-clicks the object."
    },
    "ondrag": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object continuously during a drag operation."
    },
    "ondragend": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user releases the mouse at the close of a drag operation."
    },
    "ondragenter": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element when the user drags the object to a valid drop target."
    },
    "ondragleave": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation."
    },
    "ondragover": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element continuously while the user drags the object over a valid drop target."
    },
    "ondragstart": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user starts to drag a text selection or selected object."
    },
    "ondrop": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondurationchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration attribute is updated."
    },
    "onemptied": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the media element is reset to its initial state."
    },
    "onended": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the end of playback is reached."
    },
    "onerror": {
      "type": "OnErrorEventHandlerNonNull",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when an error occurs during object loading."
    },
    "onfocus": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object receives focus."
    },
    "onformdata": {
      "type": "(this: GlobalEventHandlers, ev: FormDataEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenchange": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenerror": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ongotpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninput": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninvalid": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onkeydown": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses a key."
    },
    "onkeypress": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses an alphanumeric key."
    },
    "onkeyup": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a key."
    },
    "onload": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires immediately after the browser loads the object."
    },
    "onloadeddata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when media data is loaded at the current playback position."
    },
    "onloadedmetadata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration and dimensions of the media have been determined."
    },
    "onloadstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when Internet Explorer begins looking for media data."
    },
    "onlostpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousedown": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the object with either mouse button."
    },
    "onmouseenter": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmouseleave": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousemove": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse over the object."
    },
    "onmouseout": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer outside the boundaries of the object."
    },
    "onmouseover": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer into the object."
    },
    "onmouseup": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a mouse button while the mouse is over the object."
    },
    "onpaste": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpause": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is paused."
    },
    "onplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the play method is requested."
    },
    "onplaying": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the audio or video has started playing."
    },
    "onpointercancel": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerdown": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerenter": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerleave": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointermove": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerout": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerover": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerup": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onprogress": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: ProgressEvent<EventTarget>\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate progress while downloading media data."
    },
    "onratechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the playback rate is increased or decreased."
    },
    "onreset": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user resets a form."
    },
    "onresize": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onscroll": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user repositions the scroll box in the scroll bar on the object."
    },
    "onsecuritypolicyviolation": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: SecurityPolicyViolationEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onseeked": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the seek operation ends."
    },
    "onseeking": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the current playback position is moved."
    },
    "onselect": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the current selection changes."
    },
    "onselectionchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onselectstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onslotchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onstalled": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the download has stopped."
    },
    "onsubmit": {
      "type": "(this: GlobalEventHandlers, ev: SubmitEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onsuspend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs if the load operation has been intentionally halted."
    },
    "ontimeupdate": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate the current playback position."
    },
    "ontoggle": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchcancel": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchend": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchmove": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchstart": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitioncancel": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionend": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionrun": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionstart": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onvolumechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the volume is changed, or playback is muted or unmuted."
    },
    "onwaiting": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback stops because the next frame of a video resource is not available."
    },
    "onwebkitanimationend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkittransitionend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwheel": {
      "type": "(this: GlobalEventHandlers, ev: WheelEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ownerDocument": {
      "type": "Document",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the node document. Returns null for documents."
    },
    "parentElement": {
      "type": "HTMLElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent element."
    },
    "parentNode": {
      "type": "ParentNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent."
    },
    "part": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace prefix."
    },
    "prepend": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "previousElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first preceding sibling that is an element, and null otherwise."
    },
    "previousSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the previous sibling."
    },
    "PROCESSING_INSTRUCTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a ProcessingInstruction node."
    },
    "querySelector": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selectors: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selectors: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first element that is a descendant of node that matches selectors."
    },
    "querySelectorAll": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<...>; <E extends Element = Element>(selectors: string): NodeListOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns all element descendants of node that match selectors."
    },
    "releasePointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "remove": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes node."
    },
    "removeAttribute": {
      "type": "(qualifiedName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's first attribute whose qualified name is qualifiedName."
    },
    "removeAttributeNode": {
      "type": "(attr: Attr) => Attr",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeAttributeNS": {
      "type": "(namespace: string | null, localName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's attribute whose namespace is namespace and local name is localName."
    },
    "removeChild": {
      "type": "<T extends Node>(child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nRemoves the event listener in target's event listener list with the same type, callback, and options.\n\n\nRemoves the event listener in target's event listener list with the same type, callback, and options."
    },
    "replaceChild": {
      "type": "<T extends Node>(node: Node, child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "replaceChildren": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "replaceWith": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "requestFullscreen": {
      "type": "(\n  options?: FullscreenOptions | undefined\n) => Promise<void>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Displays element fullscreen and resolves promise when done.\n\nWhen supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference."
    },
    "requestPointerLock": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scroll": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollBy": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollIntoView": {
      "type": "(\n  arg?: boolean | ScrollIntoViewOptions | undefined\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTo": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttribute": {
      "type": "(qualifiedName: string, value: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value."
    },
    "setAttributeNode": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNodeNS": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNS": {
      "type": "(\n  namespace: string | null,\n  qualifiedName: string,\n  value: string\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value."
    },
    "setPointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "shadowRoot": {
      "type": "ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise."
    },
    "showLineNumbers": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's slot content attribute. Can be set to change it."
    },
    "spellcheck": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSStyleDeclaration",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tagName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the HTML-uppercased qualified name."
    },
    "TEXT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Text node."
    },
    "textContent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "toggleAttribute": {
      "type": "(\n  qualifiedName: string,\n  force?: boolean | undefined\n) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n\nReturns true if qualifiedName is now present, and false otherwise."
    },
    "translate": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "variant": {
      "type": "CodeBlockVariants",
      "defaultValue": "multi-line",
      "required": false,
      "externalProp": false,
      "description": "Variant of code block to render"
    },
    "webkitMatchesSelector": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "wrapLines": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    }
  },
  "CodeBlockHeader": {
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKeyLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "addEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture."
    },
    "after": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "align": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets or retrieves a value that indicates the table alignment."
    },
    "animate": {
      "type": "(\n  keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\n  options?: number | KeyframeAnimationOptions | undefined\n) => Animation",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "append": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "appendChild": {
      "type": "<T extends Node>(node: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAtomic": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAutoComplete": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaBusy": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaChecked": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaCurrent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaDisabled": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaExpanded": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHasPopup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHidden": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaInvalid": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaKeyShortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLevel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLive": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaModal": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiLine": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiSelectable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaOrientation": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPlaceholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPosInSet": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPressed": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaReadOnly": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRequired": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRoleDescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSelected": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSetSize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSort": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMax": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMin": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueNow": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "as": {
      "type": "AsTags",
      "defaultValue": "h3",
      "required": false,
      "externalProp": false,
      "description": "Heading level to render"
    },
    "assignedSlot": {
      "type": "HTMLSlotElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachInternals": {
      "type": "() => ElementInternals",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachShadow": {
      "type": "(init: ShadowRootInit) => ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Creates a shadow root for element and returns it."
    },
    "ATTRIBUTE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attributes": {
      "type": "NamedNodeMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autocapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autofocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "baseURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's node document's document base URL."
    },
    "before": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "blur": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "CDATA_SECTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a CDATASection node."
    },
    "childElementCount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "childNodes": {
      "type": "NodeListOf<ChildNode>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the children."
    },
    "classList": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object."
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's class content attribute. Can be set to change it."
    },
    "click": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "cloneNode": {
      "type": "(deep?: boolean | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants."
    },
    "closest": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selector: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selector: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise."
    },
    "COMMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Comment node."
    },
    "compareDocumentPosition": {
      "type": "(other: Node) => number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a bitmask indicating the position of other relative to node."
    },
    "contains": {
      "type": "(other: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if other is an inclusive descendant of node, and false otherwise."
    },
    "contentEditable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dataset": {
      "type": "DOMStringMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dispatchEvent": {
      "type": "(event: Event) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise."
    },
    "DOCUMENT_FRAGMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a DocumentFragment node."
    },
    "DOCUMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a document."
    },
    "DOCUMENT_POSITION_CONTAINED_BY": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is a descendant of node."
    },
    "DOCUMENT_POSITION_CONTAINS": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is an ancestor of node."
    },
    "DOCUMENT_POSITION_DISCONNECTED": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when node and other are not in the same tree."
    },
    "DOCUMENT_POSITION_FOLLOWING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is following node."
    },
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "DOCUMENT_POSITION_PRECEDING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is preceding node."
    },
    "DOCUMENT_TYPE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a doctype."
    },
    "draggable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK_HEADER",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "ELEMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is an element."
    },
    "enterKeyHint": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_REFERENCE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "firstChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child."
    },
    "firstElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child that is an element, and null otherwise."
    },
    "focus": {
      "type": "(options?: FocusOptions | undefined) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAnimations": {
      "type": "(\n  options?: GetAnimationsOptions | undefined\n) => Animation[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttribute": {
      "type": "(qualifiedName: string) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise."
    },
    "getAttributeNames": {
      "type": "() => string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the qualified names of all element's attributes. Can contain duplicates."
    },
    "getAttributeNode": {
      "type": "(qualifiedName: string) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNodeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise."
    },
    "getBoundingClientRect": {
      "type": "() => DOMRect",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getClientRects": {
      "type": "() => DOMRectList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByClassName": {
      "type": "(classNames: string) => HTMLCollectionOf<Element>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes."
    },
    "getElementsByTagName": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; (qualifiedName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByTagNameNS": {
      "type": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<...>; (namespace: string | null, localName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getRootNode": {
      "type": "(options?: GetRootNodeOptions | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's root."
    },
    "hasAttribute": {
      "type": "(qualifiedName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise."
    },
    "hasAttributeNS": {
      "type": "(namespace: string | null, localName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName."
    },
    "hasAttributes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has attributes, and false otherwise."
    },
    "hasChildNodes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node has children."
    },
    "hasPointerCapture": {
      "type": "(pointerId: number) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's id content attribute. Can be set to change it."
    },
    "inert": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentElement": {
      "type": "(\n  where: InsertPosition,\n  element: Element\n) => Element | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentHTML": {
      "type": "(position: InsertPosition, text: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentText": {
      "type": "(where: InsertPosition, data: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertBefore": {
      "type": "<T extends Node>(node: T, child: Node | null) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isConnected": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if node is connected and false otherwise."
    },
    "isContentEditable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isDefaultNamespace": {
      "type": "(namespace: string | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isEqualNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node and otherNode have the same properties."
    },
    "isSameNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lastChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child."
    },
    "lastElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child that is an element, and null otherwise."
    },
    "localName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the local name."
    },
    "lookupNamespaceURI": {
      "type": "(prefix: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lookupPrefix": {
      "type": "(namespace: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "matches": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if matching selectors against element's root yields element, and false otherwise."
    },
    "namespaceURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace."
    },
    "nextElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first following sibling that is an element, and null otherwise."
    },
    "nextSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the next sibling."
    },
    "nodeName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a string appropriate for the type of node."
    },
    "nodeType": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the type of node."
    },
    "nodeValue": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "normalize": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes."
    },
    "NOTATION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetParent": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onabort": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user aborts the download."
    },
    "onanimationcancel": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationend": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onauxclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onbeforeinput": {
      "type": "(this: GlobalEventHandlers, ev: InputEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onblur": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object loses the input focus."
    },
    "oncancel": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncanplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is possible, but would require further buffering."
    },
    "oncanplaythrough": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the contents of the object or selection have changed."
    },
    "onclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the left mouse button on the object"
    },
    "onclose": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncontextmenu": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu."
    },
    "oncopy": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncuechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncut": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondblclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user double-clicks the object."
    },
    "ondrag": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object continuously during a drag operation."
    },
    "ondragend": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user releases the mouse at the close of a drag operation."
    },
    "ondragenter": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element when the user drags the object to a valid drop target."
    },
    "ondragleave": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation."
    },
    "ondragover": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element continuously while the user drags the object over a valid drop target."
    },
    "ondragstart": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user starts to drag a text selection or selected object."
    },
    "ondrop": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondurationchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration attribute is updated."
    },
    "onemptied": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the media element is reset to its initial state."
    },
    "onended": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the end of playback is reached."
    },
    "onerror": {
      "type": "OnErrorEventHandlerNonNull",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when an error occurs during object loading."
    },
    "onfocus": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object receives focus."
    },
    "onformdata": {
      "type": "(this: GlobalEventHandlers, ev: FormDataEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenchange": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenerror": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ongotpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninput": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninvalid": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onkeydown": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses a key."
    },
    "onkeypress": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses an alphanumeric key."
    },
    "onkeyup": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a key."
    },
    "onload": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires immediately after the browser loads the object."
    },
    "onloadeddata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when media data is loaded at the current playback position."
    },
    "onloadedmetadata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration and dimensions of the media have been determined."
    },
    "onloadstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when Internet Explorer begins looking for media data."
    },
    "onlostpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousedown": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the object with either mouse button."
    },
    "onmouseenter": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmouseleave": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousemove": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse over the object."
    },
    "onmouseout": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer outside the boundaries of the object."
    },
    "onmouseover": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer into the object."
    },
    "onmouseup": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a mouse button while the mouse is over the object."
    },
    "onpaste": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpause": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is paused."
    },
    "onplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the play method is requested."
    },
    "onplaying": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the audio or video has started playing."
    },
    "onpointercancel": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerdown": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerenter": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerleave": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointermove": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerout": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerover": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerup": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onprogress": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: ProgressEvent<EventTarget>\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate progress while downloading media data."
    },
    "onratechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the playback rate is increased or decreased."
    },
    "onreset": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user resets a form."
    },
    "onresize": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onscroll": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user repositions the scroll box in the scroll bar on the object."
    },
    "onsecuritypolicyviolation": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: SecurityPolicyViolationEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onseeked": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the seek operation ends."
    },
    "onseeking": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the current playback position is moved."
    },
    "onselect": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the current selection changes."
    },
    "onselectionchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onselectstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onslotchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onstalled": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the download has stopped."
    },
    "onsubmit": {
      "type": "(this: GlobalEventHandlers, ev: SubmitEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onsuspend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs if the load operation has been intentionally halted."
    },
    "ontimeupdate": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate the current playback position."
    },
    "ontoggle": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchcancel": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchend": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchmove": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchstart": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitioncancel": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionend": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionrun": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionstart": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onvolumechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the volume is changed, or playback is muted or unmuted."
    },
    "onwaiting": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback stops because the next frame of a video resource is not available."
    },
    "onwebkitanimationend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkittransitionend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwheel": {
      "type": "(this: GlobalEventHandlers, ev: WheelEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ownerDocument": {
      "type": "Document",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the node document. Returns null for documents."
    },
    "parentElement": {
      "type": "HTMLElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent element."
    },
    "parentNode": {
      "type": "ParentNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent."
    },
    "part": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace prefix."
    },
    "prepend": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "previousElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first preceding sibling that is an element, and null otherwise."
    },
    "previousSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the previous sibling."
    },
    "PROCESSING_INSTRUCTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a ProcessingInstruction node."
    },
    "querySelector": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selectors: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selectors: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first element that is a descendant of node that matches selectors."
    },
    "querySelectorAll": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<...>; <E extends Element = Element>(selectors: string): NodeListOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns all element descendants of node that match selectors."
    },
    "releasePointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "remove": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes node."
    },
    "removeAttribute": {
      "type": "(qualifiedName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's first attribute whose qualified name is qualifiedName."
    },
    "removeAttributeNode": {
      "type": "(attr: Attr) => Attr",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeAttributeNS": {
      "type": "(namespace: string | null, localName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's attribute whose namespace is namespace and local name is localName."
    },
    "removeChild": {
      "type": "<T extends Node>(child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nRemoves the event listener in target's event listener list with the same type, callback, and options.\n\n\nRemoves the event listener in target's event listener list with the same type, callback, and options."
    },
    "replaceChild": {
      "type": "<T extends Node>(node: Node, child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "replaceChildren": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "replaceWith": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "requestFullscreen": {
      "type": "(\n  options?: FullscreenOptions | undefined\n) => Promise<void>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Displays element fullscreen and resolves promise when done.\n\nWhen supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference."
    },
    "requestPointerLock": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scroll": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollBy": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollIntoView": {
      "type": "(\n  arg?: boolean | ScrollIntoViewOptions | undefined\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTo": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttribute": {
      "type": "(qualifiedName: string, value: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value."
    },
    "setAttributeNode": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNodeNS": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNS": {
      "type": "(\n  namespace: string | null,\n  qualifiedName: string,\n  value: string\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value."
    },
    "setPointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "shadowRoot": {
      "type": "ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise."
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's slot content attribute. Can be set to change it."
    },
    "spellcheck": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSStyleDeclaration",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tagName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the HTML-uppercased qualified name."
    },
    "TEXT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Text node."
    },
    "textContent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "toggleAttribute": {
      "type": "(\n  qualifiedName: string,\n  force?: boolean | undefined\n) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n\nReturns true if qualifiedName is now present, and false otherwise."
    },
    "translate": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "webkitMatchesSelector": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    }
  },
  "CodeBlockTab": {
    "about": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "aria-activedescendant": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
    },
    "aria-atomic": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
    },
    "aria-autocomplete": {
      "type": "\"list\" | \"none\" | \"inline\" | \"both\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
    },
    "aria-busy": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
    },
    "aria-checked": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
    },
    "aria-colcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of columns in a table, grid, or treegrid."
    },
    "aria-colindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
    },
    "aria-colspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-controls": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
    },
    "aria-current": {
      "type": "| boolean\n  | \"time\"\n  | \"true\"\n  | \"false\"\n  | \"page\"\n  | \"step\"\n  | \"location\"\n  | \"date\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the element that represents the current item within a container or set of related elements."
    },
    "aria-describedby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that describes the object."
    },
    "aria-details": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides a detailed, extended description for the object."
    },
    "aria-disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
    },
    "aria-dropeffect": {
      "type": "\"copy\" | \"link\" | \"none\" | \"execute\" | \"move\" | \"popup\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target."
    },
    "aria-errormessage": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element that provides an error message for the object."
    },
    "aria-expanded": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
    },
    "aria-flowto": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
    },
    "aria-grabbed": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
    },
    "aria-haspopup": {
      "type": "| boolean\n  | \"dialog\"\n  | \"menu\"\n  | \"true\"\n  | \"false\"\n  | \"grid\"\n  | \"listbox\"\n  | \"tree\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
    },
    "aria-hidden": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element is exposed to an accessibility API."
    },
    "aria-invalid": {
      "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the entered value does not conform to the format expected by the application."
    },
    "aria-keyshortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
    },
    "aria-label": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a string value that labels the current element."
    },
    "aria-labelledby": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies the element (or elements) that labels the current element."
    },
    "aria-level": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the hierarchical level of an element within a structure."
    },
    "aria-live": {
      "type": "\"off\" | \"assertive\" | \"polite\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
    },
    "aria-modal": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether an element is modal when displayed."
    },
    "aria-multiline": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
    },
    "aria-multiselectable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the user may select more than one item from the current selectable descendants."
    },
    "aria-orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
    },
    "aria-owns": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
    },
    "aria-placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
    },
    "aria-posinset": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-pressed": {
      "type": "boolean | \"true\" | \"false\" | \"mixed\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"pressed\" state of toggle buttons."
    },
    "aria-readonly": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that the element is not editable, but is otherwise operable."
    },
    "aria-relevant": {
      "type": "| \"text\"\n  | \"additions\"\n  | \"additions removals\"\n  | \"additions text\"\n  | \"all\"\n  | \"removals\"\n  | \"removals additions\"\n  | \"removals text\"\n  | \"text additions\"\n  | \"text removals\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
    },
    "aria-required": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates that user input is required on the element before a form may be submitted."
    },
    "aria-roledescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines a human-readable, author-localized description for the role of an element."
    },
    "aria-rowcount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the total number of rows in a table, grid, or treegrid."
    },
    "aria-rowindex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
    },
    "aria-rowspan": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
    },
    "aria-selected": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates the current \"selected\" state of various widgets."
    },
    "aria-setsize": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
    },
    "aria-sort": {
      "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
    },
    "aria-valuemax": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the maximum allowed value for a range widget."
    },
    "aria-valuemin": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the minimum allowed value for a range widget."
    },
    "aria-valuenow": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the current value for a range widget."
    },
    "aria-valuetext": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
    },
    "autoCapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoCorrect": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autoSave": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contentEditable": {
      "type": "Booleanish | \"inherit\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "contextMenu": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dangerouslySetInnerHTML": {
      "type": "{ __html: string }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "datatype": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "defaultValue": {
      "type": "string | number | readonly string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "draggable": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK_TAB",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "inlist": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "| \"text\"\n  | \"none\"\n  | \"search\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
    },
    "is": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
    },
    "itemID": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemProp": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemRef": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemScope": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "itemType": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "key": {
      "type": "Key",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbort": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAbortCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEnd": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationEndCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIteration": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationIterationCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStart": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAnimationStartCapture": {
      "type": "AnimationEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onAuxClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBeforeInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onBlurCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThrough": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCanPlayThroughCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChange": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onChangeCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEnd": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionEndCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStart": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionStartCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdate": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCompositionUpdateCapture": {
      "type": "CompositionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenu": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onContextMenuCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopy": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCopyCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCut": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onCutCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClick": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDoubleClickCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrag": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnd": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEndCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnter": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragEnterCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExit": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragExitCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeave": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragLeaveCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOver": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragOverCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStart": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDragStartCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDrop": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDropCapture": {
      "type": "DragEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onDurationChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptied": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEmptiedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncrypted": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEncryptedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEnded": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onEndedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onError": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onErrorCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onFocusCapture": {
      "type": "FocusEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onGotPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInput": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInputCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalid": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onInvalidCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDown": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyDownCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPress": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyPressCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUp": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onKeyUpCapture": {
      "type": "KeyboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoad": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedData": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedDataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadata": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadedMetadataCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStart": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLoadStartCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onLostPointerCaptureCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDown": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseDownCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseEnter": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseLeave": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMove": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseMoveCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOut": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOutCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOver": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseOverCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUp": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onMouseUpCapture": {
      "type": "MouseEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPaste": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPasteCapture": {
      "type": "ClipboardEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPause": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPauseCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlay": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlaying": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPlayingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancel": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerCancelCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDown": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerDownCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnter": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerEnterCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeave": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerLeaveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMove": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerMoveCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOut": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOutCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOver": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerOverCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUp": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onPointerUpCapture": {
      "type": "PointerEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgress": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onProgressCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onRateChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onReset": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResetCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResize": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onResizeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScroll": {
      "type": "UIEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onScrollCapture": {
      "type": "UIEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeked": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekedCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeeking": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSeekingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelect": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSelectCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalled": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onStalledCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmit": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSubmitCapture": {
      "type": "FormEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspend": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onSuspendCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdate": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTimeUpdateCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancel": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchCancelCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEnd": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchEndCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMove": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchMoveCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStart": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTouchStartCapture": {
      "type": "TouchEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEnd": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onTransitionEndCapture": {
      "type": "TransitionEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChange": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onVolumeChangeCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaiting": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWaitingCapture": {
      "type": "ReactEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheel": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onWheelCapture": {
      "type": "WheelEventHandler<HTMLDivElement>",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "placeholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "property": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "radioGroup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "resource": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "results": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "AriaRole",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "security": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "spellCheck": {
      "type": "Booleanish",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressContentEditableWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "suppressHydrationWarning": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "translate": {
      "type": "\"yes\" | \"no\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "typeof": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "unselectable": {
      "type": "\"on\" | \"off\"",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "vocab": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    }
  },
  "CodeBlockTabList": {
    "disabled": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK_TAB_LIST",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "focusable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "variant": {
      "type": "\"fitted\" | \"inverse\" | \"inverse_fitted\"",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    }
  },
  "CodeBlockTabPanel": {
    "accessKey": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "accessKeyLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "addEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture."
    },
    "after": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "align": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets or retrieves how the object is aligned with adjacent text."
    },
    "animate": {
      "type": "(\n  keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\n  options?: number | KeyframeAnimationOptions | undefined\n) => Animation",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "append": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "appendChild": {
      "type": "<T extends Node>(node: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAtomic": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaAutoComplete": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaBusy": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaChecked": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaColSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaCurrent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaDisabled": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaExpanded": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHasPopup": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaHidden": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaInvalid": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaKeyShortcuts": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLabel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLevel": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaLive": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaModal": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiLine": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaMultiSelectable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaOrientation": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPlaceholder": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPosInSet": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaPressed": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaReadOnly": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRequired": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRoleDescription": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowCount": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndex": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowIndexText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaRowSpan": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSelected": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSetSize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaSort": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMax": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueMin": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueNow": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ariaValueText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "assignedSlot": {
      "type": "HTMLSlotElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachInternals": {
      "type": "() => ElementInternals",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attachShadow": {
      "type": "(init: ShadowRootInit) => ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Creates a shadow root for element and returns it."
    },
    "ATTRIBUTE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "attributes": {
      "type": "NamedNodeMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autocapitalize": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "autofocus": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "baseURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's node document's document base URL."
    },
    "before": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "blur": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "CDATA_SECTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a CDATASection node."
    },
    "childElementCount": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "childNodes": {
      "type": "NodeListOf<ChildNode>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the children."
    },
    "classList": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object."
    },
    "className": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's class content attribute. Can be set to change it."
    },
    "click": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "clientWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "cloneNode": {
      "type": "(deep?: boolean | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a copy of node. If deep is true, the copy also includes the node's descendants."
    },
    "closest": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selector: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selector: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise."
    },
    "COMMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Comment node."
    },
    "compareDocumentPosition": {
      "type": "(other: Node) => number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a bitmask indicating the position of other relative to node."
    },
    "contains": {
      "type": "(other: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if other is an inclusive descendant of node, and false otherwise."
    },
    "contentEditable": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dataset": {
      "type": "DOMStringMap",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dir": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "dispatchEvent": {
      "type": "(event: Event) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise."
    },
    "DOCUMENT_FRAGMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a DocumentFragment node."
    },
    "DOCUMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a document."
    },
    "DOCUMENT_POSITION_CONTAINED_BY": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is a descendant of node."
    },
    "DOCUMENT_POSITION_CONTAINS": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is an ancestor of node."
    },
    "DOCUMENT_POSITION_DISCONNECTED": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when node and other are not in the same tree."
    },
    "DOCUMENT_POSITION_FOLLOWING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is following node."
    },
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "DOCUMENT_POSITION_PRECEDING": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Set when other is preceding node."
    },
    "DOCUMENT_TYPE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a doctype."
    },
    "draggable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK_TAB_PANEL",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "ELEMENT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is an element."
    },
    "enterKeyHint": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ENTITY_REFERENCE_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "firstChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child."
    },
    "firstElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first child that is an element, and null otherwise."
    },
    "focus": {
      "type": "(options?: FocusOptions | undefined) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAnimations": {
      "type": "(\n  options?: GetAnimationsOptions | undefined\n) => Animation[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttribute": {
      "type": "(qualifiedName: string) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise."
    },
    "getAttributeNames": {
      "type": "() => string[]",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the qualified names of all element's attributes. Can contain duplicates."
    },
    "getAttributeNode": {
      "type": "(qualifiedName: string) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNodeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getAttributeNS": {
      "type": "(\n  namespace: string | null,\n  localName: string\n) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise."
    },
    "getBoundingClientRect": {
      "type": "() => DOMRect",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getClientRects": {
      "type": "() => DOMRectList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByClassName": {
      "type": "(classNames: string) => HTMLCollectionOf<Element>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes."
    },
    "getElementsByTagName": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; (qualifiedName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getElementsByTagNameNS": {
      "type": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<...>; (namespace: string | null, localName: string): HTMLCollectionOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "getRootNode": {
      "type": "(options?: GetRootNodeOptions | undefined) => Node",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns node's root."
    },
    "hasAttribute": {
      "type": "(qualifiedName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise."
    },
    "hasAttributeNS": {
      "type": "(namespace: string | null, localName: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has an attribute whose namespace is namespace and local name is localName."
    },
    "hasAttributes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if element has attributes, and false otherwise."
    },
    "hasChildNodes": {
      "type": "() => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node has children."
    },
    "hasPointerCapture": {
      "type": "(pointerId: number) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "id": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's id content attribute. Can be set to change it."
    },
    "inert": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "innerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "inputMode": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentElement": {
      "type": "(\n  where: InsertPosition,\n  element: Element\n) => Element | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentHTML": {
      "type": "(position: InsertPosition, text: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertAdjacentText": {
      "type": "(where: InsertPosition, data: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "insertBefore": {
      "type": "<T extends Node>(node: T, child: Node | null) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isConnected": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if node is connected and false otherwise."
    },
    "isContentEditable": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isDefaultNamespace": {
      "type": "(namespace: string | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "isEqualNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns whether node and otherNode have the same properties."
    },
    "isSameNode": {
      "type": "(otherNode: Node | null) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lang": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lastChild": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child."
    },
    "lastElementChild": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the last child that is an element, and null otherwise."
    },
    "localName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the local name."
    },
    "lookupNamespaceURI": {
      "type": "(prefix: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "lookupPrefix": {
      "type": "(namespace: string | null) => string | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "matches": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns true if matching selectors against element's root yields element, and false otherwise."
    },
    "namespaceURI": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace."
    },
    "nextElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first following sibling that is an element, and null otherwise."
    },
    "nextSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the next sibling."
    },
    "nodeName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns a string appropriate for the type of node."
    },
    "nodeType": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the type of node."
    },
    "nodeValue": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "nonce": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "normalize": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes."
    },
    "NOTATION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetParent": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "offsetWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onabort": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user aborts the download."
    },
    "onanimationcancel": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationend": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onauxclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onbeforeinput": {
      "type": "(this: GlobalEventHandlers, ev: InputEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onblur": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object loses the input focus."
    },
    "oncancel": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncanplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is possible, but would require further buffering."
    },
    "oncanplaythrough": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the contents of the object or selection have changed."
    },
    "onclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the left mouse button on the object"
    },
    "onclose": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncontextmenu": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu."
    },
    "oncopy": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncuechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oncut": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondblclick": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user double-clicks the object."
    },
    "ondrag": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object continuously during a drag operation."
    },
    "ondragend": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user releases the mouse at the close of a drag operation."
    },
    "ondragenter": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element when the user drags the object to a valid drop target."
    },
    "ondragleave": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation."
    },
    "ondragover": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the target element continuously while the user drags the object over a valid drop target."
    },
    "ondragstart": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires on the source object when the user starts to drag a text selection or selected object."
    },
    "ondrop": {
      "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ondurationchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration attribute is updated."
    },
    "onemptied": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the media element is reset to its initial state."
    },
    "onended": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the end of playback is reached."
    },
    "onerror": {
      "type": "OnErrorEventHandlerNonNull",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when an error occurs during object loading."
    },
    "onfocus": {
      "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the object receives focus."
    },
    "onformdata": {
      "type": "(this: GlobalEventHandlers, ev: FormDataEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenchange": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onfullscreenerror": {
      "type": "(this: Element, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ongotpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninput": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "oninvalid": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onkeydown": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses a key."
    },
    "onkeypress": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user presses an alphanumeric key."
    },
    "onkeyup": {
      "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a key."
    },
    "onload": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires immediately after the browser loads the object."
    },
    "onloadeddata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when media data is loaded at the current playback position."
    },
    "onloadedmetadata": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the duration and dimensions of the media have been determined."
    },
    "onloadstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when Internet Explorer begins looking for media data."
    },
    "onlostpointercapture": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousedown": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user clicks the object with either mouse button."
    },
    "onmouseenter": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmouseleave": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onmousemove": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse over the object."
    },
    "onmouseout": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer outside the boundaries of the object."
    },
    "onmouseover": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user moves the mouse pointer into the object."
    },
    "onmouseup": {
      "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user releases a mouse button while the mouse is over the object."
    },
    "onpaste": {
      "type": "(\n  this: DocumentAndElementEventHandlers,\n  ev: ClipboardEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpause": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback is paused."
    },
    "onplay": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the play method is requested."
    },
    "onplaying": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the audio or video has started playing."
    },
    "onpointercancel": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerdown": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerenter": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerleave": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointermove": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerout": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerover": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onpointerup": {
      "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onprogress": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: ProgressEvent<EventTarget>\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate progress while downloading media data."
    },
    "onratechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the playback rate is increased or decreased."
    },
    "onreset": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user resets a form."
    },
    "onresize": {
      "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onscroll": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the user repositions the scroll box in the scroll bar on the object."
    },
    "onsecuritypolicyviolation": {
      "type": "(\n  this: GlobalEventHandlers,\n  ev: SecurityPolicyViolationEvent\n) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onseeked": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the seek operation ends."
    },
    "onseeking": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the current playback position is moved."
    },
    "onselect": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Fires when the current selection changes."
    },
    "onselectionchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onselectstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onslotchange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onstalled": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the download has stopped."
    },
    "onsubmit": {
      "type": "(this: GlobalEventHandlers, ev: SubmitEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onsuspend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs if the load operation has been intentionally halted."
    },
    "ontimeupdate": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs to indicate the current playback position."
    },
    "ontoggle": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchcancel": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchend": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchmove": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontouchstart": {
      "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitioncancel": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionend": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionrun": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ontransitionstart": {
      "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onvolumechange": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when the volume is changed, or playback is muted or unmuted."
    },
    "onwaiting": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Occurs when playback stops because the next frame of a video resource is not available."
    },
    "onwebkitanimationend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationiteration": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkitanimationstart": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwebkittransitionend": {
      "type": "(this: GlobalEventHandlers, ev: Event) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "onwheel": {
      "type": "(this: GlobalEventHandlers, ev: WheelEvent) => any",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerHTML": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "outerText": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "ownerDocument": {
      "type": "Document",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the node document. Returns null for documents."
    },
    "parentElement": {
      "type": "HTMLElement",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent element."
    },
    "parentNode": {
      "type": "ParentNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the parent."
    },
    "part": {
      "type": "DOMTokenList",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "prefix": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the namespace prefix."
    },
    "prepend": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "previousElementSibling": {
      "type": "Element",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first preceding sibling that is an element, and null otherwise."
    },
    "previousSibling": {
      "type": "ChildNode",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the previous sibling."
    },
    "PROCESSING_INSTRUCTION_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a ProcessingInstruction node."
    },
    "querySelector": {
      "type": "{\n  <K extends keyof HTMLElementTagNameMap>(selectors: K):\n    | HTMLElementTagNameMap[K]\n    | null\n  <K extends keyof SVGElementTagNameMap>(selectors: K):\n    | SVGElementTagNameMap[K]\n    | null\n  <E extends Element = Element>(selectors: string): E | null\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the first element that is a descendant of node that matches selectors."
    },
    "querySelectorAll": {
      "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<...>; <E extends Element = Element>(selectors: string): NodeListOf<...>; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns all element descendants of node that match selectors."
    },
    "releasePointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "remove": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes node."
    },
    "removeAttribute": {
      "type": "(qualifiedName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's first attribute whose qualified name is qualifiedName."
    },
    "removeAttributeNode": {
      "type": "(attr: Attr) => Attr",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeAttributeNS": {
      "type": "(namespace: string | null, localName: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Removes element's attribute whose namespace is namespace and local name is localName."
    },
    "removeChild": {
      "type": "<T extends Node>(child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "removeEventListener": {
      "type": "{ <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | ... 1 more ... | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | ... 1 more ... | undefined): void; }",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "\n\nRemoves the event listener in target's event listener list with the same type, callback, and options.\n\n\nRemoves the event listener in target's event listener list with the same type, callback, and options."
    },
    "replaceChild": {
      "type": "<T extends Node>(node: Node, child: T) => T",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "replaceChildren": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "replaceWith": {
      "type": "(...nodes: (string | Node)[]) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated."
    },
    "requestFullscreen": {
      "type": "(\n  options?: FullscreenOptions | undefined\n) => Promise<void>",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Displays element fullscreen and resolves promise when done.\n\nWhen supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference."
    },
    "requestPointerLock": {
      "type": "() => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "role": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scroll": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollBy": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollIntoView": {
      "type": "(\n  arg?: boolean | ScrollIntoViewOptions | undefined\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollLeft": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTo": {
      "type": "{\n  (options?: ScrollToOptions | undefined): void\n  (x: number, y: number): void\n}",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollTop": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "scrollWidth": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttribute": {
      "type": "(qualifiedName: string, value: string) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's first attribute whose qualified name is qualifiedName to value."
    },
    "setAttributeNode": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNodeNS": {
      "type": "(attr: Attr) => Attr | null",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "setAttributeNS": {
      "type": "(\n  namespace: string | null,\n  qualifiedName: string,\n  value: string\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value."
    },
    "setPointerCapture": {
      "type": "(pointerId: number) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "shadowRoot": {
      "type": "ShadowRoot",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise."
    },
    "slot": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the value of element's slot content attribute. Can be set to change it."
    },
    "spellcheck": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "style": {
      "type": "CSSStyleDeclaration",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "tagName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "Returns the HTML-uppercased qualified name."
    },
    "TEXT_NODE": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "node is a Text node."
    },
    "textContent": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "toggleAttribute": {
      "type": "(\n  qualifiedName: string,\n  force?: boolean | undefined\n) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true,
      "description": "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n\nReturns true if qualifiedName is now present, and false otherwise."
    },
    "translate": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    },
    "webkitMatchesSelector": {
      "type": "(selectors: string) => boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": true
    }
  },
  "CodeBlockWrapper": {
    "element": {
      "type": "string",
      "defaultValue": "CODE_BLOCK_WRAPPER",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "state": {
      "type": "CodeBlockTabStateReturn",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    }
  }
}
