{
  "ComboboxListbox": {
    "hidden": {
      "type": "boolean",
      "defaultValue": null,
      "required": true,
      "externalProp": false
    },
    "element": {
      "type": "any",
      "defaultValue": "COMBOBOX_LISTBOX",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    }
  },
  "ComboboxListboxOption": {
    "variant": {
      "type": "\"default\" | \"groupOption\"",
      "defaultValue": "default",
      "required": true,
      "externalProp": false
    },
    "disabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "externalProp": false
    },
    "element": {
      "type": "any",
      "defaultValue": "COMBOBOX",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "highlighted": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "selected": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "startHeight": {
      "type": "number",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    }
  },
  "ComboboxListboxGroup": {
    "element": {
      "type": "any",
      "defaultValue": "COMBOBOX",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "groupLabelTemplate": {
      "type": "(groupName: string) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "This function allows you to use your own jsx template for the group label in the drop-down list"
    },
    "groupName": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    }
  },
  "MultiselectCombobox": {
    "selectedItemsLabelText": {
      "type": "string",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "Hidden helper text for screen readers"
    },
    "element": {
      "type": "any",
      "defaultValue": "MULTISELECT_COMBOBOX",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "i18nKeyboardControls": {
      "type": "string",
      "defaultValue": "Press Delete or Backspace to remove. Press Enter to toggle selection.",
      "required": false,
      "externalProp": false,
      "description": "Visually hidden string that has instructions for how to remove and select pills with a keyboard"
    },
    "initialSelectedItems": {
      "type": "any[]",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Sets the initial items selected when initialized"
    },
    "maxHeight": {
      "type": "any",
      "defaultValue": "100%",
      "required": false,
      "externalProp": false,
      "description": "The maximum height of the Combobox listbox"
    },
    "onSelectedItemsChange": {
      "type": "(\n  newSelectedItems: UseMultiSelectPrimitiveStateChange<Item>\n) => void",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Callback function for after an item is selected or deselected"
    },
    "state": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    }
  },
  "Combobox": {
    "labelText": {
      "type": "NonNullable<ReactNode>",
      "defaultValue": null,
      "required": true,
      "externalProp": false,
      "description": "The contents of the label text"
    },
    "autocomplete": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Activates the autocomplete/typeahead feature"
    },
    "disabledItems": {
      "type": "any[]",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "element": {
      "type": "any",
      "defaultValue": "COMBOBOX",
      "required": false,
      "externalProp": false,
      "description": "Overrides the default element name to apply unique styles with the Customization Provider"
    },
    "emptyState": {
      "type": "FC<{}>",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "A custom empty state component to render when there are no items in the list"
    },
    "getA11ySelectionMessage": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "getA11yStatusMessage": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "groupItemsBy": {
      "type": "string",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "The name of the key in your item objects that you would like Combobox to group the items by"
    },
    "groupLabelTemplate": {
      "type": "(groupName: string) => ReactNode",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "This function allows you to use your own jsx template for the group label in the drop-down list"
    },
    "helpText": {
      "type": "| string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | ReactFragment\n  | ReactPortal",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "The contents of the help and error text"
    },
    "hideVisibleLabel": {
      "type": "boolean",
      "defaultValue": null,
      "required": false,
      "externalProp": false
    },
    "initialIsOpen": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "initialSelectedItem": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "inputValue": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "items": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "itemToString": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "onChange": {
      "type": "never",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Use `onInputValueChange` instead."
    },
    "onHighlightedIndexChange": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "onInput": {
      "type": "never",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Use `onInputValueChange` instead."
    },
    "onInputValueChange": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "onIsOpenChange": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "onSelectedItemChange": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "optionTemplate": {
      "type": "OptionTemplateFn<any>",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "This function allows you to use your own jsx template for the items in the drop-down list"
    },
    "selectedItem": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook Prop (see https://github.com/downshift-js/downshift/blob/master/src/hooks/useCombobox/README.md#advanced-props docs)"
    },
    "state": {
      "type": "any",
      "defaultValue": null,
      "required": false,
      "externalProp": false,
      "description": "Downshift useCombobox Hook return props for when you are using the hook outside of the component"
    },
    "variant": {
      "type": "any",
      "defaultValue": "default",
      "required": false,
      "externalProp": false
    }
  }
}
